// /////////////////////////////////////////////////////////////////////////////
// Copyright 2014, Kun Wang, http://www.quantumman.me/.
// Department of Computer Science & Technology, Nanjing University, China.
// Distributed under the protect of GNU GPLv3.
// @date Aug 23, 2015-6:39:08 PM
// @file arxiv-manager/cn.edu.nju.cs.filter/PaperFilter.java
// @brief PapersFilter filters papers array list generated by ArxivExtractor,
// based on keywords given in 'abstract-keywords.txt',
// 'author-keywords.txt' and 'title-keywords.txt'.
// The filter works by scanning each paper in list, if any domain of
// the paper's information matches the keywords given, then add this
// paper to a new list named 'filteredPapers'.
// We have following three keywords filters:
// 1. 'title keywords filter', the keywords are read from file and stored
// in a hash set named 'titleKeywordsSet'
// 2. 'authors keywords filter', the keywords are read from file and stored
// in a hash set named 'authorsKeywordsSet'
// 3. 'abstract keywords filter', the keywords are read from file and stored
// in a hash set named 'abstractKeywordsSet'
// !!! Attention !!! The keywords are not case sensitive, the matching
// procedure first transformed the string into lower case string, then matching.
// /////////////////////////////////////////////////////////////////////////////
package cn.edu.nju.cs.filter;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;

import cn.edu.nju.cs.paper.*;
import cn.edu.nju.cs.utility.ManagerIO;

public class PapersFilter
{
    public static final String FILTERED_PAPERS_FILE_MARK = "-filtered";
    public static final String MARKDOWN_PAPERS_FILE_MARK = "-markdown";
    public static final String MARKDOWN_FORMAT_EXTENSION = ".md";
    public static final int    MIN_KEYWORD_LENGTH        = 3;
    private String             originFilePath            = null;
    private String             filteredFilePath          = null;
    private String             markdownFilePath          = null;
    private ArrayList<Paper>   originPapers              = null;
    private ArrayList<Paper>   filteredPapers            = null;
    private HashSet<String>    titleKeywordsSet          = null;
    private HashSet<String>    authorKeywordsSet         = null;
    private HashSet<String>    abstractKeywordsSet       = null;
    
    public PapersFilter(String originFilePath) throws IOException
    {
        this.originFilePath = originFilePath;
        this.filteredFilePath = createFilteredFilePath();
        this.markdownFilePath = createMarkdownFilePath();
        this.originPapers = new ArrayList<Paper>();
        this.filteredPapers = new ArrayList<Paper>();
        this.titleKeywordsSet = new HashSet<String>();
        this.authorKeywordsSet = new HashSet<String>();
        this.abstractKeywordsSet = new HashSet<String>();
        
        this.initKeywordsSet(ManagerIO.createTitleKeywordsFilePath(), titleKeywordsSet);
        this.initKeywordsSet(ManagerIO.createAuthorKeywordsFilePath(), authorKeywordsSet);
        this.initKeywordsSet(ManagerIO.createAbstractKeywordsFilePath(), abstractKeywordsSet);
    }
    
    private String createFilteredFilePath()
    {
        int index = this.originFilePath.indexOf('.');
        StringBuffer buffer = new StringBuffer();
        buffer.append(this.originFilePath.substring(0, index));
        buffer.append(FILTERED_PAPERS_FILE_MARK);
        buffer.append(this.originFilePath.substring(index));
        return buffer.toString();
    }

    private String createMarkdownFilePath()
    {
        int index = this.originFilePath.indexOf('.');
        StringBuffer buffer = new StringBuffer();
        buffer.append(this.originFilePath.substring(0, index));
        buffer.append(FILTERED_PAPERS_FILE_MARK);
        buffer.append(MARKDOWN_PAPERS_FILE_MARK);
        buffer.append(MARKDOWN_FORMAT_EXTENSION);
        return buffer.toString();
    }
    
    public void filter() throws IOException
    {
        // Step1. load not-filtered papers into list from file
        ManagerIO.loadPapers(this.originPapers, this.originFilePath);
        // Step2. filter the papers
        this.filterByKeywords();
        // step3. write filtered papers into file
        ManagerIO.savePapers(this.filteredPapers, this.filteredFilePath, false);
        // step4. save filtered papers into file in markdown format
        ManagerIO.savePapersInMarkdown(this.filteredPapers, this.markdownFilePath, false);
    }
    
    public void filterByKeywords()
    {
        Iterator<Paper> it = this.originPapers.iterator();
        while (it.hasNext())
        {
            Paper paper = it.next();
            String title = paper.getPaperTitle();
            String author = paper.getPaperAuthors();
            String abs = paper.getPaperAbstract();
            boolean matchFlag = matches(title, titleKeywordsSet) ||
                    matches(author, authorKeywordsSet) ||
                    matches(abs, abstractKeywordsSet);
            
            if (matchFlag)
                this.filteredPapers.add(paper);
        }
    }
    
    // If there is one of the strings in keywords that appears in string,
    // then return true; else return false.
    public boolean matches(String str, HashSet<String> keywords)
    {
        str = str.toLowerCase();
        Iterator<String> it = keywords.iterator();
        while (it.hasNext())
        {
            String keyword = it.next();
            if (-1 != str.indexOf(keyword)) // find the first match of the keyword
                return true;
        }
        return false;
    }
    
    // initKeywordsSet() initial the keywords set by reading keywords from a given file.
    // @param fileName the file to be read
    // @param keywordsSet the set to be initialized
    private void initKeywordsSet(String fileName, HashSet<String> keywordsSet) throws IOException
    {
        File file = new File(fileName);
        BufferedReader reader = new BufferedReader(new FileReader(file));
        String keyword = null;
        while ((keyword = reader.readLine()) != null && keyword.length() >= MIN_KEYWORD_LENGTH)
            keywordsSet.add(keyword.toLowerCase());         // keywords are case insensitive
        reader.close();
    }
    
    public int getNumberOfFilteredPapers()
    {
        return filteredPapers.size();
    }
    
    public ArrayList<Paper> getFilteredPapers()
    {
        return filteredPapers;
    }
}
